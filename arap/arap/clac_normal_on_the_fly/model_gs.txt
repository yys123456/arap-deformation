#version 450 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in VS_OUT{
	vec3 FragPos;
}gs_in[];

out vec3 FragPos;
out vec3 Normal;
out vec3 cap_normal;

uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;

vec3 GetNormal(){
   vec3 a = vec3(gl_in[0].gl_Position) - vec3(gl_in[1].gl_Position);
   vec3 b = vec3(gl_in[2].gl_Position) - vec3(gl_in[1].gl_Position);
   return normalize(cross(b, a));
}  

void main(){
	vec3 norm = mat3(transpose(inverse(model))) * GetNormal();
	vec3 cap_norm = vec3(view * model * vec4(GetNormal(), 0.0));
	mat4 MVP = projection * view * model;
	
	gl_Position = MVP * gl_in[0].gl_Position;
	Normal = norm;
	cap_normal = cap_norm;
	FragPos = vec3(model * vec4(gs_in[0].FragPos, 1.0));
	EmitVertex();
	
	gl_Position = MVP * gl_in[1].gl_Position;
	Normal = norm;
	cap_normal = cap_norm;
	FragPos = vec3(model * vec4(gs_in[1].FragPos, 1.0));
	EmitVertex();
	
	gl_Position = MVP * gl_in[2].gl_Position;
	Normal = norm;
	cap_normal = cap_norm;
	FragPos = vec3(model * vec4(gs_in[2].FragPos, 1.0));
	EmitVertex();

	EndPrimitive();
}  